<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>aoc2021`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h008314aaf93dbf5e (51,352 samples, 99.99%)</title><rect x="10.0" y="213" width="1179.9" height="15.0" fill="rgb(227,51,15)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >aoc2021`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h008314aaf93dbf5e</text>
</g>
<g >
<title>libsystem_malloc.dylib`free_tiny (42 samples, 0.08%)</title><rect x="631.6" y="149" width="0.9" height="15.0" fill="rgb(247,222,48)" rx="2" ry="2" />
<text  x="634.58" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.06%)</title><rect x="630.7" y="133" width="0.7" height="15.0" fill="rgb(206,45,15)" rx="2" ry="2" />
<text  x="633.71" y="143.5" ></text>
</g>
<g >
<title>aoc2021`hashbrown::raw::RawTable$LT$T$C$A$GT$::insert::h03a5dc6f3432b3fe (23 samples, 0.04%)</title><rect x="629.7" y="133" width="0.5" height="15.0" fill="rgb(253,19,47)" rx="2" ry="2" />
<text  x="632.70" y="143.5" ></text>
</g>
<g >
<title>aoc2021`alloc::raw_vec::finish_grow::h2d5a206749ba1f86 (91 samples, 0.18%)</title><rect x="627.1" y="133" width="2.1" height="15.0" fill="rgb(231,151,7)" rx="2" ry="2" />
<text  x="630.15" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.03%)</title><rect x="627.4" y="53" width="0.3" height="15.0" fill="rgb(239,122,9)" rx="2" ry="2" />
<text  x="630.40" y="63.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.04%)</title><rect x="625.9" y="117" width="0.4" height="15.0" fill="rgb(220,102,52)" rx="2" ry="2" />
<text  x="628.91" y="127.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.04%)</title><rect x="625.0" y="117" width="0.4" height="15.0" fill="rgb(231,5,13)" rx="2" ry="2" />
<text  x="627.99" y="127.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (2,068 samples, 4.03%)</title><rect x="1142.4" y="165" width="47.5" height="15.0" fill="rgb(250,211,12)" rx="2" ry="2" />
<text  x="1145.41" y="175.5" >libs..</text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.02%)</title><rect x="627.5" y="37" width="0.2" height="15.0" fill="rgb(221,120,24)" rx="2" ry="2" />
<text  x="630.47" y="47.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="630.0" y="101" width="0.2" height="15.0" fill="rgb(239,114,45)" rx="2" ry="2" />
<text  x="632.95" y="111.5" ></text>
</g>
<g >
<title>aoc2021`_$LT$alloc..string..String$u20$as$u20$core..clone..Clone$GT$::clone::h0ff7fd9e91de586a (19 samples, 0.04%)</title><rect x="625.9" y="133" width="0.4" height="15.0" fill="rgb(218,120,15)" rx="2" ry="2" />
<text  x="628.91" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (11 samples, 0.02%)</title><rect x="632.3" y="117" width="0.2" height="15.0" fill="rgb(210,194,6)" rx="2" ry="2" />
<text  x="635.29" y="127.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.04%)</title><rect x="625.0" y="101" width="0.4" height="15.0" fill="rgb(218,104,37)" rx="2" ry="2" />
<text  x="628.01" y="111.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_free_no_lock (33 samples, 0.06%)</title><rect x="631.8" y="133" width="0.7" height="15.0" fill="rgb(243,55,31)" rx="2" ry="2" />
<text  x="634.79" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="626.1" y="85" width="0.2" height="15.0" fill="rgb(240,197,45)" rx="2" ry="2" />
<text  x="629.09" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.03%)</title><rect x="627.4" y="69" width="0.3" height="15.0" fill="rgb(216,132,5)" rx="2" ry="2" />
<text  x="630.38" y="79.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_malloc_zone_malloc (73 samples, 0.14%)</title><rect x="623.1" y="117" width="1.7" height="15.0" fill="rgb(235,165,25)" rx="2" ry="2" />
<text  x="626.13" y="127.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate (58 samples, 0.11%)</title><rect x="623.5" y="85" width="1.3" height="15.0" fill="rgb(223,137,46)" rx="2" ry="2" />
<text  x="626.47" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_realloc (77 samples, 0.15%)</title><rect x="627.3" y="85" width="1.8" height="15.0" fill="rgb(208,191,1)" rx="2" ry="2" />
<text  x="630.33" y="95.5" ></text>
</g>
<g >
<title>aoc2021`_$LT$alloc..string..String$u20$as$u20$core..clone..Clone$GT$::clone::h0ff7fd9e91de586a (9 samples, 0.02%)</title><rect x="622.9" y="149" width="0.2" height="15.0" fill="rgb(231,218,30)" rx="2" ry="2" />
<text  x="625.87" y="159.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (1,560 samples, 3.04%)</title><rect x="1106.6" y="165" width="35.8" height="15.0" fill="rgb(233,70,32)" rx="2" ry="2" />
<text  x="1109.57" y="175.5" >lib..</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="625.3" y="85" width="0.1" height="15.0" fill="rgb(235,51,53)" rx="2" ry="2" />
<text  x="628.26" y="95.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.01%)</title><rect x="623.0" y="101" width="0.1" height="15.0" fill="rgb(250,30,38)" rx="2" ry="2" />
<text  x="625.97" y="111.5" ></text>
</g>
<g >
<title>aoc2021`alloc::raw_vec::RawVec$LT$T$C$A$GT$::reserve::do_reserve_and_handle::h2de036bf272d65e6 (95 samples, 0.18%)</title><rect x="627.1" y="149" width="2.2" height="15.0" fill="rgb(227,76,5)" rx="2" ry="2" />
<text  x="630.08" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.01%)</title><rect x="623.0" y="117" width="0.1" height="15.0" fill="rgb(239,105,45)" rx="2" ry="2" />
<text  x="625.97" y="127.5" ></text>
</g>
<g >
<title>aoc2021`core::ops::function::impls::_$LT$impl$u20$core..ops..function..FnMut$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$::call_mut::hcf7ea12fa50d607a (6 samples, 0.01%)</title><rect x="626.4" y="133" width="0.1" height="15.0" fill="rgb(225,16,13)" rx="2" ry="2" />
<text  x="629.37" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`realloc (90 samples, 0.18%)</title><rect x="627.2" y="117" width="2.0" height="15.0" fill="rgb(211,11,45)" rx="2" ry="2" />
<text  x="630.17" y="127.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc (63 samples, 0.12%)</title><rect x="623.4" y="101" width="1.4" height="15.0" fill="rgb(224,224,24)" rx="2" ry="2" />
<text  x="626.36" y="111.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="624.5" y="69" width="0.2" height="15.0" fill="rgb(248,90,19)" rx="2" ry="2" />
<text  x="627.48" y="79.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.01%)</title><rect x="626.2" y="69" width="0.1" height="15.0" fill="rgb(237,66,23)" rx="2" ry="2" />
<text  x="629.21" y="79.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_free_to_block (38 samples, 0.07%)</title><rect x="632.6" y="149" width="0.9" height="15.0" fill="rgb(223,92,20)" rx="2" ry="2" />
<text  x="635.59" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.01%)</title><rect x="626.6" y="133" width="0.1" height="15.0" fill="rgb(209,115,32)" rx="2" ry="2" />
<text  x="629.57" y="143.5" ></text>
</g>
<g >
<title>libsystem_kernel.dylib`madvise (11 samples, 0.02%)</title><rect x="632.3" y="101" width="0.2" height="15.0" fill="rgb(235,34,10)" rx="2" ry="2" />
<text  x="635.29" y="111.5" ></text>
</g>
<g >
<title>aoc2021`_$LT$alloc..string..String$u20$as$u20$core..clone..Clone$GT$::clone::h0ff7fd9e91de586a (81 samples, 0.16%)</title><rect x="623.1" y="133" width="1.8" height="15.0" fill="rgb(224,212,1)" rx="2" ry="2" />
<text  x="626.08" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`malloc_zone_realloc (87 samples, 0.17%)</title><rect x="627.2" y="101" width="2.0" height="15.0" fill="rgb(207,169,9)" rx="2" ry="2" />
<text  x="630.19" y="111.5" ></text>
</g>
<g >
<title>dyld`start (51,355 samples, 100.00%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(206,174,14)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >dyld`start</text>
</g>
<g >
<title>aoc2021`hashbrown::map::HashMap$LT$K$C$V$C$S$C$A$GT$::insert::hbc510e5ae7fc1175 (41 samples, 0.08%)</title><rect x="629.3" y="149" width="0.9" height="15.0" fill="rgb(215,217,12)" rx="2" ry="2" />
<text  x="632.31" y="159.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.01%)</title><rect x="624.8" y="117" width="0.1" height="15.0" fill="rgb(250,162,3)" rx="2" ry="2" />
<text  x="627.80" y="127.5" ></text>
</g>
<g >
<title>aoc2021`_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::try_fold::hbdb4f895952fbe28 (64 samples, 0.12%)</title><rect x="625.5" y="149" width="1.5" height="15.0" fill="rgb(214,2,15)" rx="2" ry="2" />
<text  x="628.54" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.04%)</title><rect x="625.0" y="133" width="0.4" height="15.0" fill="rgb(237,49,19)" rx="2" ry="2" />
<text  x="627.96" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.02%)</title><rect x="622.9" y="133" width="0.2" height="15.0" fill="rgb(231,84,4)" rx="2" ry="2" />
<text  x="625.90" y="143.5" ></text>
</g>
<g >
<title>aoc2021`std::collections::hash::map::RandomState::new::KEYS::__getit::h962764006aa91f0f (6 samples, 0.01%)</title><rect x="630.2" y="149" width="0.2" height="15.0" fill="rgb(223,133,18)" rx="2" ry="2" />
<text  x="633.25" y="159.5" ></text>
</g>
<g >
<title>aoc2021`hashbrown::raw::RawTable$LT$T$C$A$GT$::reserve_rehash::h3db751bbb092e963 (19 samples, 0.04%)</title><rect x="629.8" y="117" width="0.4" height="15.0" fill="rgb(245,90,19)" rx="2" ry="2" />
<text  x="632.79" y="127.5" ></text>
</g>
<g >
<title>aoc2021`aoc2021::days::day12::solve::h57da5d84bd6c1d47 (47,592 samples, 92.67%)</title><rect x="12.9" y="165" width="1093.5" height="15.0" fill="rgb(248,201,12)" rx="2" ry="2" />
<text  x="15.90" y="175.5" >aoc2021`aoc2021::days::day12::solve::h57da5d84bd6c1d47</text>
</g>
<g >
<title>aoc2021`std::rt::lang_start_internal::hf65df31c3ffe3b9a (51,352 samples, 99.99%)</title><rect x="10.0" y="229" width="1179.9" height="15.0" fill="rgb(236,5,37)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >aoc2021`std::rt::lang_start_internal::hf65df31c3ffe3b9a</text>
</g>
<g >
<title>aoc2021`std::sys_common::backtrace::__rust_begin_short_backtrace::h87f1a5a56a1893ea (51,352 samples, 99.99%)</title><rect x="10.0" y="197" width="1179.9" height="15.0" fill="rgb(247,80,41)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >aoc2021`std::sys_common::backtrace::__rust_begin_short_backtrace::h87f1a5a56a1893ea</text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="630.0" y="69" width="0.2" height="15.0" fill="rgb(234,107,53)" rx="2" ry="2" />
<text  x="632.95" y="79.5" ></text>
</g>
<g >
<title>aoc2021`_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$::clone::he15fd4071922a333 (103 samples, 0.20%)</title><rect x="623.1" y="149" width="2.3" height="15.0" fill="rgb(249,4,37)" rx="2" ry="2" />
<text  x="626.08" y="159.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (20,576 samples, 40.07%)</title><rect x="633.6" y="149" width="472.8" height="15.0" fill="rgb(206,64,17)" rx="2" ry="2" />
<text  x="636.63" y="159.5" >libsystem_platform.dylib`_platform_memcmp$VARIANT$Base</text>
</g>
<g >
<title>libsystem_malloc.dylib`free (49 samples, 0.10%)</title><rect x="630.5" y="149" width="1.1" height="15.0" fill="rgb(209,195,17)" rx="2" ry="2" />
<text  x="633.46" y="159.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_size (8 samples, 0.02%)</title><rect x="631.4" y="117" width="0.2" height="15.0" fill="rgb(216,42,49)" rx="2" ry="2" />
<text  x="634.40" y="127.5" ></text>
</g>
<g >
<title>aoc2021`main (51,352 samples, 99.99%)</title><rect x="10.0" y="245" width="1179.9" height="15.0" fill="rgb(240,5,44)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >aoc2021`main</text>
</g>
<g >
<title>aoc2021`aoc2021::main::hf660e212a1c0ea41 (51,352 samples, 99.99%)</title><rect x="10.0" y="181" width="1179.9" height="15.0" fill="rgb(225,66,26)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >aoc2021`aoc2021::main::hf660e212a1c0ea41</text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (60 samples, 0.12%)</title><rect x="627.7" y="69" width="1.4" height="15.0" fill="rgb(221,195,51)" rx="2" ry="2" />
<text  x="630.72" y="79.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="626.0" y="101" width="0.3" height="15.0" fill="rgb(240,204,14)" rx="2" ry="2" />
<text  x="629.04" y="111.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (13 samples, 0.03%)</title><rect x="626.7" y="133" width="0.3" height="15.0" fill="rgb(222,6,42)" rx="2" ry="2" />
<text  x="629.71" y="143.5" ></text>
</g>
<g >
<title>aoc2021`DYLD-STUB$$memcmp (123 samples, 0.24%)</title><rect x="10.0" y="165" width="2.8" height="15.0" fill="rgb(218,135,29)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="630.0" y="85" width="0.2" height="15.0" fill="rgb(237,36,18)" rx="2" ry="2" />
<text  x="632.95" y="95.5" ></text>
</g>
<g >
<title>all (51,355 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(252,113,34)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`szone_size (9 samples, 0.02%)</title><rect x="631.4" y="133" width="0.2" height="15.0" fill="rgb(214,123,41)" rx="2" ry="2" />
<text  x="634.38" y="143.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.01%)</title><rect x="632.1" y="117" width="0.1" height="15.0" fill="rgb(213,45,43)" rx="2" ry="2" />
<text  x="635.11" y="127.5" ></text>
</g>
</g>
</svg>
